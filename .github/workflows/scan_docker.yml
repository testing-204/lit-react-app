name: 🛡️ Scan Docker images 🐳

on:
  push:
    branches:
      - master
  schedule:
    - cron:  '0 5 * * *'
  workflow_dispatch:

jobs:
  get_images:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.generate.outputs.image_list }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      - name: Generate Image Matrix
        id: generate
        run: |
          images=($(cat server/docker/docker-compose.yml | grep -i "image:" | awk '{print $2}'))
          image=$(jq -c -n '$ARGS.positional' --args "${images[@]}")
          echo $image
          echo "image_list=$(jq -cn --argjson image_name $image '{images: $image_name}')" >> $GITHUB_OUTPUT          

  scan:
    name: 🛡️ Scan images
    runs-on: ubuntu-latest
    permissions:
      packages: read
      contents: read
      issues: write
    needs: get_images
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.get_images.outputs.images) }}
    
    steps:
      - name: scan docker hub images
        uses: anchore/scan-action@v3
        if: ${{ !startsWith( matrix.images, 'ghcr.io' ) }}
        id: scan
        with:
         image: ${{ matrix.images }}
         fail-build: true
         severity-cutoff: critical
         output-format: json

      - name: Pull image from github container registry
        if: ${{ startsWith( matrix.images, 'ghcr.io' ) }}
        id: get-docker-image-layer
        env: 
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo $TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          docker pull ${{ matrix.images }}

      - name: scan github container registry images
        uses: anchore/scan-action@v3
        if: ${{ startsWith( matrix.images, 'ghcr.io' ) }}
        id: scan-ghcr
        with:
         image: ${{ matrix.images }}
         fail-build: true
         severity-cutoff: critical
         output-format: json
     
      - name: Create/Update an issue of vulnerabilities 🛡️ that have been detected
        if: ${{ failure() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: true
          script: |
            const fs = require('fs');
            let data = fs.readFileSync(`${{  steps.scan.outputs.json || steps.scan-ghcr.outputs.json }}`, 'utf8');
            data = JSON.parse(data)
            data = data.matches;

            const { owner, repo } = context.repo;
            const regex = /^(?:.*\/)?([^/]+)$/;
            const labels = ['security', 'docker scan failed', `${'${{ matrix.images }}'.match(regex)?.[1]}`];

            const vulnerabilities = data.map(item => item.vulnerability);

            // Extracting severities
            const severities = vulnerabilities.map(item => item.severity);

            // Counting the occurrences of each severity level
            const countBySeverity = severities.reduce((acc, severity) => {
              acc[severity] = (acc[severity] || 0) + 1;
              return acc;
            }, {});

            console.log("Count by Severity:", countBySeverity);

            let markdown = "| Image | Low | High | Medium | Critical | Scan Location |\n";
            markdown += "| --- | --- | --- | --- | --- | --- |\n";
            markdown += `| ${{ matrix.images }} |`;
            for (const severity of ["Low", "High", "Medium", "Critical"]) {
              markdown += ` ${countBySeverity[severity] || 0} |`;
            }
            markdown += ` [${{ github.run_id }}](https://github.com/${owner}/${repo}/actions/runs/${{ github.run_id }}) |\n`;

            console.log(markdown);

            let commentMarkdown = "";

            // Table headers
            commentMarkdown += "| Severity | Package | Version | Fix Version | Type | Location | Data Namespace | Link |\n";
            commentMarkdown += "| --- | --- | --- | --- | --- | --- | --- | --- |\n";
            let highVulnerabilityMarkdown = ""
            let criticalVulnerabilityMarkdown = ""
            let vulnerabilityMarkdown = ""
            data.forEach((match) => {
              if(match.vulnerability.severity == "High" ) {
                vulnerabilityMarkdown = `| ${match.vulnerability.severity} | ${match.artifact.name} | ${match.artifact.version} | ${match.vulnerability.fix.versions || ""} | ${match.artifact.type} | ${match.artifact.locations[0].path} | ${match.vulnerability.namespace} | [${match.vulnerability.id}](${match.vulnerability.dataSource}) |\n`;
                if (highVulnerabilityMarkdown.length + vulnerabilityMarkdown.length <= 65400) 
                    highVulnerabilityMarkdown += vulnerabilityMarkdown;
                }
              
                if(match.vulnerability.severity == "Critical") {
                    vulnerabilityMarkdown = `| ${match.vulnerability.severity} | ${match.artifact.name} | ${match.artifact.version} | ${match.vulnerability.fix.versions || ""} | ${match.artifact.type} | ${match.artifact.locations[0].path} | ${match.vulnerability.namespace} | [${match.vulnerability.id}](${match.vulnerability.dataSource}) |\n`;
                    if (criticalVulnerabilityMarkdown.length + vulnerabilityMarkdown.length <= 65400) 
                    criticalVulnerabilityMarkdown += vulnerabilityMarkdown;
                }
            });

            criticalVulnerabilityMarkdown = commentMarkdown + criticalVulnerabilityMarkdown

            console.log("High Vul\n", commentMarkdown + highVulnerabilityMarkdown)
            console.log("Critical Vul\n", criticalVulnerabilityMarkdown)
            
            const existingIssue = (await github.paginate(github.rest.issues.listForRepo.endpoint.merge({
              owner, repo, state: 'open',labels
            }))).filter(i => i.title.indexOf('Docker image security scan') !== -1)[0];
            
            const body = `Workflow failed for commit ${{github.sha}}.
            Detected vulnerabilities in \`${{ matrix.images }}\` docker image.
            ${markdown}
                `;
        
            if (existingIssue) {
              github.rest.issues.update({ owner, repo, issue_number: existingIssue.number, body });
            } else {
              const response = await github.rest.issues.create({
                owner, repo,
                title : '🛡️ Docker image security scan failed 🛡️',
                body,
                labels
            });

            const commentBody = `Workflow failed for commit ${{github.sha}}.

            Following Critical vulnerabilities have been detected:
                  ${criticalVulnerabilityMarkdown}
                `;
                github.rest.issues.createComment({
                  issue_number: response.data.number,
                  owner, repo,
                  body: commentBody
                });       
            }
            
      - name: Delete issues when scans are successful
        if: ${{ success() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          debug: true
          script: |
            const regex = /^(?:.*\/)?([^/]+)$/;
            const { owner, repo } = context.repo;
            const labels = ['security', 'docker scan failed', `${'${{ matrix.images }}'.match(regex)?.[1]}`];
            const existingIssue = (await github.paginate(github.rest.issues.listForRepo.endpoint.merge({
              owner, repo, state: 'open',labels
            }))).filter(i => i.title.indexOf('Docker image security scan') !== -1)[0];
            
            if (existingIssue) {
              const body = `Closing this issue, all vulnerabilities have been removed 🎉
              `;
              github.rest.issues.createComment({
                  issue_number: existingIssue.number,
                  owner, repo,
                  body
                });    
              github.rest.issues.update({ owner, repo, issue_number: existingIssue.number, state_reason: "completed", state:"close" });
            }
